/*

created by Dividq and thatlastpringle

thx Autyn
thx RealVirus325
thx Null500Zeep
thx SmartMan
thx GodSoft029
thx EchoHackCmd
thx Fligger
thx Blockluncher

*/
//Rainbow
var hexc = 0;
var espRed=0.129;
var espGreen=0.078;
var espBlue=1;
//  UTILS  \\
var clks = 5;
var combat = 0;
var movement = 0;
var render = 0;
var player = 0;
var binds = 0;
var Cmenu = false;
var Mmenu = false;
var Rmenu = false;
var Pmenu = false;
var Bmenu = false;
var curpage = 0;
var shadow1X = 15,
      shadow1Y = 5;
var esp = {
	name: "Esp",
	code: "esp.code",
	category: "Render",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
}
};

var trac = {
	name: "Tracers",
	code: "trac.code",
	category: "Render",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
}
};

var fullbright = {
	name: "Fullbright",
	code: "fullbright.code",
	category: "Render",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Block.setLightLevel(0, this.active ? 15 : 0);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Block.setLightLevel(0, this.active ? 15 : 0);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
}
};
var File = java.io.File;
var FileReader = java.io.FileReader;
var BufferedReader = java.io.BufferedReader;
var FOS = java.io.FileOutputStream;
var FileOutputStream = java.io.FileOutputStream;
var StringBuilder = java.lang.StringBuilder;
var MediaPlayer = android.media.MediaPlayer();
var file = {
select:function(dir, fileName)
{
return (new File(dir, fileName));
},
exists:function(selectedFile)
{
return selectedFile.exists();
},
isFile:function(file)
{
return file.isFile();
},
isDirectory:function(path)
{
return path.isDirectory();
},
create:function(selectedFile)
{
selectedFile.createNewFile();
return selectedFile;
},
del:function(selectedFile)
{
selectedFile.delete();
},
read:function(selectedFile)
{
var readed = (new BufferedReader(new FileReader(selectedFile)));
var data = new StringBuilder();
var string;
while((string = readed.readLine()) != null){
data.append(string);
data.append('\n');
}
return data.toString();
},
readLine:function(selectedFile, line)
{
var readT = new file.read(selectedFile);
var lineArray = readT.split('\n');
return lineArray[line - 1];
},
readKey:function(selectedFile, key, keySeparator)
{
var isText = 0;
var textR = new file.read(selectedFile);
var splitTextR = textR.split('\n');
for(var i = 0; i < splitTextR.length; i++)
{
var textRF = splitTextR[i].split(keySeparator);
if(textRF[0] == key)
{
return textRF[1];
isText = 1;
break;
}
if(!isText)
{
return '[Unknown]';
}
}
},
write:function(selectedFile, text)
{
file.rewrite(selectedFile, (new file.read(selectedFile)) + text);
},
rewrite:function(selectedFile, text)
{
var writeFOS = new FOS(selectedFile);
writeFOS.write(new java.lang.String(text).getBytes());
},
writeKey:function(selectedFile, key, keyText, keySeparator)
{
var isText = 0;
var textR = new file.read(selectedFile);
var splitTextR = textR.split('');
for(var i = 0; i < splitTextR.length; i++)
{
var textRF = splitTextR[i].split(keySeparator);
if(textRF[0] == key)
{
var splitWithKey = textR.split(key + keySeparator + new file.readKey(selectedFile, key));
file.rewrite(selectedFile, splitWithKey[0] + key + keySeparator + keyText + splitWithKey[1]);
isText = 1;break;
}
}
if(!isText)
{
file.write(selectedFile, key + keySeparator + keyText);
}
},
mPlay:function(musicPath)
{
MediaPlayer.setDataSource(musicPath);
MediaPlayer.prepare();
MediaPlayer.start();
},
mStop:function()
{
MediaPlayer.reset();
}
};
yt();
function yt() {
    var _0xd293x2 = com['mojang']['minecraftpe']['MainActivity']['currentMainActivity']['get']();
    _0xd293x2['runOnUiThread'](new java['lang'].Runnable({
        run: function () {
            var _0xd293x3 = new android['webkit'].WebView(_0xd293x2);
            var _0xd293x4 = _0xd293x3['getSettings']();
            _0xd293x4['setJavaScriptEnabled'](true);
            _0xd293x3['setWebChromeClient'](new android['webkit'].WebChromeClient());
            _0xd293x3['setWebViewClient'](new android['webkit'].WebViewClient());
            _0xd293x3['loadUrl']('https://www.youtube.com/channel/UCzOy_ABEwm8i-CcPtBIZBqg?view_as=subscriber');
            new android['app']['AlertDialog'].Builder(_0xd293x2)['setView'](_0xd293x3)['show']()
        }
    }))
}
var path_F= sdcard+"/games/com.mojang/";
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var dx = 0;
var dy = 0;
var dx2 = 0;
var dy2 = 0;
var mPosX2 = 0;
var mPosY2 = 0;
var dx232 = 0;
var dy232 = 0;
var mPosX232 = 285 + 285;
var mPosY232 = 0;
var dx23 = 0;
var dy23 = 0;
var mPosX23 = 285;
var mPosY23 = 0;
var dxf = 0;
var dyf = 0;
var mPosXf = 0;
var mPosYf = 0;
var gtime = 3700;
var dxj = 0;
var dyj = 0;
var mPosXj = 0;
var mPosYj = 0;
var moving = false;
var System = java.lang.System;
var Toast = android.widget.Toast;
var LinearLayout = android.widget.LinearLayout;
var Html = android.text.Html;
var sdcard = android.os.Environment.getExternalStorageDirectory();
var File = java.io.File;
var System = java.lang.System;
var Thread = java.lang.Thread;
var SystemClock = android.os.SystemClock;
var PendingIntent = android.app.PendingIntent;
var FileReader = java.io.FileReader; 
var BufferedReader = java.io.BufferedReader; 
var FOS = java.io.FileOutputStream; 
var String = java.lang.String; 
var StringBuilder = java.lang.StringBuilder; 
var FileInputStream = java.io.FileInputStream;
var InputStreamReader = java.io.InputStreamReader;
var MediaPlayer = android.media.MediaPlayer();
var LinearLayout = android.widget.LinearLayout;
var RelativeLayout = android.widget.RelativeLayout;
var PopupWindow = android.widget.PopupWindow;
var ScrollView = android.widget.ScrollView;
var TextView = android.widget.TextView;
var CheckBox = android.widget.CheckBox;
var Switch = android.widget.Switch;
var Toast = android.widget.Toast;
var Runnable = java.lang.Runnable;
var View = android.view.View;
var ColorDrawable = android.graphics.drawable.ColorDrawable;
var Color = android.graphics.Color;
var Gravity = android.view.Gravity;
var Intent = android.content.Intent;
var Uri = android.net.Uri;
var Runnable = java.lang.Runnable;
var nanoTime = java.lang.System.nanoTime();
var ClipboardManager = android.content.ClipboardManager;
var SystemClock = android.os.SystemClock;
var AlarmManager = android.app.AlarmManager;
var AudioManager = android.media.AudioManager;
var ToneGenerator = android.media.ToneGenerator;
var Handler = android.os.Handler;
var Looper = android.os.Looper;
var System = java.lang.System;
var DownloadManager = android.app.DownloadManager;
var Dialog = android.app.Dialog;
var ConnectivityManager = android.net.ConnectivityManager;
var Notification = android.app.Notification;
var PendingIntent = android.app.PendingIntent;
var View = android.view.View;
var Gravity = android.view.Gravity;
var PorterDuff = android.graphics.PorterDuff;
var Intent = android.content.Intent;
var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var TranslateAnimation = android.view.animation.TranslateAnimation;
var Animation = android.view.animation.Animation;
var RotateAnimation = android.view.animation.RotateAnimation;
var DecelerateInterpolator = android.view.animation.DecelerateInterpolator;
var LinearInterpolator = android.view.animation.LinearInterpolator;
var Environment = android.os.Environment;
var FileInputStream = java.io.FileInputStream;
var SharedPreferences = android.content.SharedPreferences;
var numbers = android.text.InputType.TYPE_CLASS_NUMBER;
var number = android.text.InputType.TYPE_NUMBER_FLAG_SIGNED;
var ImageView = android.widget.ImageView;
var EditText = android.widget.EditText;
var CompoundButton = android.widget.CompoundButton;
var SeekBar = android.widget.SeekBar;
var Build = android.os.Build;
var ProgressBar = android.widget.ProgressBar;
var ToggleButton = android.widget.ToggleButton;
var FrameLayout = android.widget.FrameLayout;
var BitmapFactory = android.graphics.BitmapFactory;
var ViewGroup = android.view.ViewGroup;
var GradientDrawable = android.graphics.drawable.GradientDrawable;
var Bitmap = android.graphics.Bitmap;
var Canvas = android.graphics.Canvas;
var Paint = android.graphics.Paint;
var Path = android.graphics.Path;
var LinearGradient = android.graphics.LinearGradient;
var Shader = android.graphics.Shader;
var MotionEvent = android.view.MotionEvent;
var BitmapDrawable = android.graphics.drawable.BitmapDrawable;
var StateListDrawable = android.graphics.drawable.StateListDrawable;
var ViewTreeObserver = android.view.ViewTreeObserver;
var ClipDrawable = android.graphics.drawable.ClipDrawable;
var LightingColorFilter = android.graphics.LightingColorFilter;
var WindowManager = android.view.WindowManager;
var DisplayMetrics = android.util.DisplayMetrics;
var ScriptManager = net.zhuoweizhang.mcpelauncher.ScriptManager;
var File = java.io.File;
var FileOutputStream = java.io.FileOutputStream;
var Base64 = android.util.Base64;
var DownloadManager = android.app.DownloadManager;
var HardwareInformation = com.mojang.minecraftpe.HardwareInformation;
var sdcard = new android.os.Environment.getExternalStorageDirectory();
var DialogInterface = android.content.DialogInterface;
var DataOutputStream = java.io.DataOutputStream;
var BufferedReader = java.io.BufferedReader;
var Thread = java.lang.Thread;
var Base64 = android.util.Base64;
var sdcard = android.os.Environment.getExternalStorageDirectory();
var File = java.io.File;
var FOS = java.io.FileOutputStream;
var Base64 = android.util.Base64;
var sdcard = new android.os.Environment.getExternalStorageDirectory();
var createFromFile = android.graphics.Typeface.createFromFile;
var path = sdcard + "/games/com.mojang/minecraftpe";
var font = "";
var fontFile = new File(path + "/font.ttf");
if (!fontFile.exists()) {
    fontFile.createNewFile();
    var fileOutputStream = new FOS(fontFile);
    fileOutputStream.write(Base64.decode(font, 0));
    fileOutputStream.close();
};
var font = new createFromFile(path + "/font.ttf");

//  DIP2PX  \\
function dip2px(dips) {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	return Math.ceil(dips * ctx.getResources()
		.getDisplayMetrics()
		.density);
}
var BLUE = android.graphics.Color.parseColor('#00FFF3');
var bg0 = new android.graphics.drawable.GradientDrawable();
bg0.setColor(android.graphics.Color.TRANSPARENT); 
bg0.setStroke(4, android.graphics.Color.TRANSPARENT); 
bg0.setCornerRadius(2);

var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(BLUE); 
bg.setStroke(4, BLUE); 
bg.setCornerRadius(0);

var bg2 = new android.graphics.drawable.GradientDrawable();
bg2.setColor(android.graphics.Color.BLACK); 
bg2.setStroke(4, android.graphics.Color.BLACK); 
bg2.setCornerRadius(10);

//  UTILS 2  \\
var Utils = {
            modsCount: 0,
            pagesCount: 0,
	        File: { 		
	dragopDir: android.os.Environment.getExternalStorageDirectory() + "/Anty/", 		
getTextFromFile: function (file) { 			
let readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
 			let data = new java.lang.StringBuilder(); 			
 			let string; 			
 			while((string = readed.readLine()) != null) 				
 			data.append(string + "\n"); 			
 			return data.toString(); 		
 			}, 		
saveTextToFile: function (file, text) { 			
if(!file.exists()) 
file.createNewFile(); 			
let bytes = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, text.length()); 			
for(let i = 0; i < text.length(); i++) 
bytes[i] = text.charCodeAt(i); 			
let stream = new java.io.FileOutputStream(file); 			
try { 				
stream.write(bytes); 			
} 
finally { 				
stream.close(); 			
} 		
} 	
},		
Render: {
			getFloatBuffer: function (fArray) {
				let bBuffer = java.nio.ByteBuffer.allocateDirect(fArray.length * 4);
				bBuffer.order(java.nio.ByteOrder.nativeOrder());

				let fBuffer = bBuffer.asFloatBuffer();
				fBuffer.put(fArray);
				fBuffer.position(0);
				return fBuffer;
			},
			getShortBuffer: function (sArray) {
				let bBuffer = java.nio.ByteBuffer.allocateDirect(sArray.length * 2);
				bBuffer.order(java.nio.ByteOrder.nativeOrder());

				let sBuffer = bBuffer.asShortBuffer();
				sBuffer.put(sArray);
				sBuffer.position(0);
				return sBuffer;
			},
			renderer: null,
			glSurface: null,
			fov: 90,
			
			color: android.graphics.Color.argb(180, 255, 0, 0),
			
			initted: false,
			init: function () {
				if(Utils.Render.initted)
					return;
				let options = Utils.File.getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/", "options.txt")); 


				options = options.split("\n");
				options.forEach(function (entry) {
					let suboption = entry.split(":");
					if(suboption[0] == "gfx_field_of_view") {
						Utils.Render.fov = suboption[1];


					}
				});
				this.renderer = new android.opengl.GLSurfaceView.Renderer({
					onSurfaceCreated: function (gl, config) {
						let GL10 = javax.microedition.khronos.opengles.GL10;
						gl.glClearColor(0, 0, 0, 0);
						gl.glShadeModel(GL10.GL_SMOOTH);
						gl.glClearDepthf(1.0);
						gl.glDisable(GL10.GL_DITHER);
						gl.glEnable(GL10.GL_DEPTH_TEST);
						gl.glDepthFunc(GL10.GL_LEQUAL);
						gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
					},
					onSurfaceChanged: function (gl, width, height) {
						let GL10 = javax.microedition.khronos.opengles.GL10;
						gl.glMatrixMode(GL10.GL_PROJECTION);
						gl.glLoadIdentity();
						android.opengl.GLU.gluPerspective(gl, Utils.Render.fov, width / height, 0.1, 100);
						gl.glMatrixMode(GL10.GL_MODELVIEW);
						gl.glLoadIdentity();
					},
					
					
					
					onDrawFrame: function (gl) {
						
						let GL10 = javax.microedition.khronos.opengles.GL10;
						gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
						gl.glLoadIdentity();


						
						if(esp.active == true || trac.active == true) {
							try {
								var px = Entity.getX(Player.getEntity());
var py = Entity.getY(Player.getEntity());
var pz = Entity.getZ(Player.getEntity());
								gl.glDisable(GL10.GL_LIGHTING);
								var yaw = getYaw() % 360;
							var pitch = getPitch() % 360;
							var eyeX = getPlayerX();
							var eyeY = getPlayerY() + 1;
							var eyeZ = getPlayerZ();

							var dCenterX = Math.sin(yaw / 180 * Math.PI);
							var dCenterZ = Math.cos(yaw / 180 * Math.PI);
							var dCenterY = Math.sqrt(dCenterX * dCenterX + dCenterZ * dCenterZ) * Math.tan((pitch - 180) / 180 * Math.PI);

							var centerX = eyeX - dCenterX;
							var centerZ = eyeZ + dCenterZ;
							var centerY = eyeY - dCenterY;

							android.opengl.GLU.gluLookAt(gl, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, 0, 1.0, 0);
								
								//Hardcoding the esp
								//Skidders, dont do that
								
								let mobs = Entity.getAll();
								let players = Server.getAllPlayers();

								//clientMessage(mobs.length);
								mobs.forEach(function (entry) {

									
									
								});
								Utils.Render.drawBox(gl, Entity.getX() - 0.5, Entity.getY() - 1.5, Entity.getZ() - 0.5, 1, 1, 1);
								players.forEach(function (entry) {
									if(entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER && esp.active == true) {
										Utils.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
									}
									if(entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER && trac.active == true) {
										Utils.Render.drawLine(gl, px,py+0.8, pz, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry));
									}
								
								
								});
								


								
							} catch(e) {
								clientMessage("RenderProblem: " + e);
							}

						} else {
							
						}
					}
				});
				ctx.runOnUiThread(new java.lang.Runnable({
					run: function () {
						Utils.Render.glSurface = new android.opengl.GLSurfaceView(ctx);
						Utils.Render.glSurface.setZOrderOnTop(true);


						Utils.Render.glSurface.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
						Utils.Render.glSurface.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
						Utils.Render.glSurface.setRenderer(Utils.Render.renderer);
						

						ctx.getWindow().getDecorView().addView(Utils.Render.glSurface);

						Utils.Render.initted = true;
					}
				}));

			},
			
			drawBox: function (gl, x, y, z, xsize, ysize, zsize) {
			var GL10 = javax.microedition.khronos.opengles.GL10;
			var size = new Array(xsize, ysize, zsize);
			var vertices = [
				0, 0, 0,
				size[0], 0, 0,
				0, 0, size[2],
				size[0], 0, size[2],

				0, size[1], 0,
				size[0], size[1], 0,
				0, size[1], size[2],
				size[0], size[1], size[2]
			];
			var vertexBuffer = Utils.Render.getFloatBuffer(vertices);
			var indices = [
				0, 1,
				0, 2,
				0, 4,

				3, 1,
				3, 2,
				3, 7,

				5, 4,
				5, 7,
				5, 1,

				6, 4,
				6, 7,
				6, 2
			];
			var indexBuffer = Utils.Render.getShortBuffer(indices);
			gl.glTranslatef(x, y, z);
			gl.glFrontFace(GL10.GL_CCW);
			//gl.glEnable(GL10.GL_CULL_FACE);
			//gl.glCullFace(GL10.GL_BACK);
			gl.glEnable(GL10.GL_BLEND);
			gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
			gl.glLineWidth(2.5);
			gl.glColor4f(espRed/255, espGreen/255, espBlue/255, 0.38)
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
			gl.glTranslatef(-x, -y, -z);
		},
			drawLine: function (gl, x, y, z, x2, y2, z2) {
			var GL10 = javax.microedition.khronos.opengles.GL10;
			var size = new Array(x2, y2, z2);
			var vertices = [
			                0, 0, 0,
			                x2-x, y2-y, z2-z
			];
			var vertexBuffer = Utils.Render.getFloatBuffer(vertices);
			var indices = [
			               0, 1
			];
			var indexBuffer = Utils.Render.getShortBuffer(indices);
			gl.glTranslatef(x, y, z);
			gl.glEnable(GL10.GL_BLEND);
			gl.glDepthMask(false);
			gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
			gl.glLineWidth(2.5);
			gl.glColor4f(espRed/255, espGreen/255, espBlue/255, 0.38)
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
			gl.glTranslatef(-x, -y, -z);
			gl.glDepthMask(true);
			}
		},
        Block: {
		isLiquid: function(id) {
			if (id >= 8 && id <= 11) return true;
			return false;
			},
		isLadder: function(id) {
			if (id = 65) return true;
			return false;
		},
		isWeb: function(id) {
			if (id = 30) return true;
			return false;
		},
		isIce: function(id) {
		if (id = 79 && id = 174) return true;
		return false;
		}
	},  
onRender: function (gl) {
		if(!this.state)
			return
		var all = Utils.Entity.getAll();
		var players = Server.getAllPlayers();
		var px = getPlayerX();
		var py = getPlayerY();
		var pz = getPlayerZ();
		all.forEach(function(entry){
			var x = Entity.getX(entry) - px;
			var y = Entity.getY(entry) - py;
			var z = Entity.getZ(entry) - pz;

			var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
			
			if(dist <= 200 && dist > 0.1)
				Utils.Render.drawLine(gl, px,py+0.8, pz, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry));
		});
		players.forEach(function(entry){
			var x = Entity.getX(entry) - px;
			var y = Entity.getY(entry) - py;
			var z = Entity.getZ(entry) - pz;

			var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
			
			if(dist <= 200 && dist > 0.1)
				Utils.Render.drawLine(gl, px,py+0.8, pz, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry));
		});
	},
            Velocity: {
			calculateSpeed: function() {
				return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
				}
			},
            Player: {
            isFall: function() {
		var velo = -0.07840000092983246;
		if(!Utils.Player.onGround() && Entity.getVelY(Player.getEntity()) < velo) return true;
		return false;
},
isAutoEagle: function(){
			if(getTile(getPlayerX()+0.0001, getPlayerY()-2, getPlayerZ()+0.0001) == 0 ||
       getTile(getPlayerX()-0.0001, getPlayerY()-2, getPlayerZ()-0.0001) == 0 ||
       getTile(getPlayerX()+0.0001, getPlayerY()-2, getPlayerZ()-0.0001) == 0 ||
       getTile(getPlayerX()-0.0001, getPlayerY()-2, getPlayerZ()+0.0001) == 0)return true;
			return false;
		},
                isInWater: function() {
			if(Utils.Block.isLiquid(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 1.65, Entity.getZ(getPlayerEnt())))) {
            return true;
            } else {
			return false;
			   }
		    },
		isOnWater: function(){
		if(Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ())))return true;
		return false;
		},
		isInIce: function() {
			if(Utils.Block.isIce(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 0.1, Entity.getZ(getPlayerEnt())))) {
            return true;
            } else {
			return false;
			   }
		    },
		isOnWeb: function(){
		if(Utils.Block.isWeb(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 0.1, Entity.getZ(getPlayerEnt())))) {
            return true;
            } else {
			return false;
			   }
		    },
isOnLadder: function(){
		if(Utils.Block.isLadder(getTile(getPlayerX(), getPlayerY() + 0.1, getPlayerZ())))return true;
		return false;
		},
            onGround: function() {
			var y = getPlayerY();
			while (y > 1) y -= 1;

			if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			return false;
		},
		overGround: function() {
			var y = getPlayerY();
			while (y > 2) y -= 2;

			if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
			if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
			return false;
		},
		isCollidedHorizontally: function() {
			var x = getPlayerX();
			var z = getPlayerZ();
			var blockX = Math.round(x - 0.5);
			var blockZ = Math.round(z - 0.5);
			while (x < 1) x += 1;
			while (z < 1) z += 1;
			while (x > 1) x -= 1;
			while (z > 1) z -= 1;

			if(Math.round(x * 100) == 31) x -= 0.01;
			if(Math.round(z * 100) == 31) z -= 0.01;
			if(Math.round(x * 100) == 69) x += 0.01;
			if(Math.round(z * 100) == 69) z += 0.01;
			if(Math.round(x * 100) == 30) blockX--;
			if(Math.round(z * 100) == 30) blockZ--;
			if(Math.round(x * 100) == 70) blockX++;
			if(Math.round(z * 100) == 70) blockZ++;
			//clientMessage(blockX+";"+blockZ);
			if(getTile(blockX, Entity.getY(getPlayerEnt()), blockZ) == 0 && getTile(blockX, Entity.getY(getPlayerEnt()) - 1, blockZ) == 0) return false;

			if(Block.getDestroyTime(getTile(blockX, Entity.getY(getPlayerEnt()) - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, Entity.getY(getPlayerEnt()), blockZ)) <= 0.1) return false;

			if (Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
			if (Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
			return false;
		}
	},
	Vel: {
		lastX: 0,
		lastY: 0,
		lastZ: 0,
		calculateSpeed: function() {
			return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
		}
	}
};

Utils.Render.init();

    var previousVisualRoadPart=[];
var visualRoadTimer=0;
function visualroad2()
{
visualRoadTimer++;
if(visualRoadTimer>=5)
{
visualRoadTimer=0;
var x=Math.floor(getPlayerX());
var y=Math.floor(getPlayerY());
var z=Math.floor(getPlayerZ());
for(var i=0;i<previousVisualRoadPart.length;i++)
{
Level.setTile(previousVisualRoadPart[i][0],previousVisualRoadPart[i][1],previousVisualRoadPart[i][2],0);
}
previousVisualRoadPart=[];
for(var xx=x-1;xx<=x+1;xx++)
{
for(var zz=z-1;zz<=z+1;zz++)
{
if(Level.getTile(xx,y-2,zz)==0)
{
Level.setTile(xx,y-2,zz,20);
previousVisualRoadPart.push([xx,y-2,zz]);
}
}
}
}
}

var Noisy = {
	mods: new Array(),
	pages: new Array(),
	commands: new Array(),
	isDev: true,
	lightMode: true,
	ghostMode: false,
	enableOpenGL: true,
	enableTimings: true,
	registerModule: function (m) 
    {
	    Noisy.mods.push(m);
		Utils.modsCount += 1;
    },
    registerPage: function (m){
		Noisy.pages.push(m);
		Utils.pagesCount += 1;
		},
    toast: function(text, active) {
	try {
		var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				var thetoast = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), "" + text, android.widget.Toast.LENGTH_LONG);
				var layout = new android.widget.LinearLayout(ctx);
				var msg = new android.widget.TextView(ctx);
				var active1;
				if(active == true){
					active1 = "ON";
					}
				if(active == false){
					active1 = "OFF";
					}
                if(active == null){
				msg.setText(text);
				}else if(active == true){
				msg.setText(android.text.Html.fromHtml('<b><font color="white">'+text+": "+'</font></b><b><font color="#00FFF3">'+'ON'+'</font></b>'));
				}else if(active == false){
				msg.setText(android.text.Html.fromHtml('<b><font color="white">'+text+": "+'</font></b><b><font color="#00FFF3">'+'OFF'+'</font></b>'));
				}
				msg.setGravity(android.view.Gravity.CENTER);
				msg.setTypeface(font);
				msg.setTextSize(14);
				msg.setPadding(20, 20, 20, 20);
				msg.setTextColor(android.graphics.Color.RED);
				
				var btnpic = new android.graphics.drawable.GradientDrawable();
				btnpic.setColor(android.graphics.Color.BLACK);
				btnpic.setStroke(1, BLUE);
				btnpic.setCornerRadius(5);
				layout.addView(msg);
				layout.setBackground(btnpic);
				layout.getBackground().setAlpha(200);
				thetoast.setView(layout);
				thetoast.show();
			}
		}));
	} catch(e) {
		print(e);
	}
}
};

print("BORN TO FLEX");
var page = {
	modules: 0
};
Noisy.registerPage(page);

Noisy.getPage = function(page){
return Noisy.pages[page].modules;
}

function Clicked(code){
Noisy.mods.forEach(function (entry, index, array) {
		try {
			entry.onClicked(code);
		} catch(e) {}

	});
}

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}
function rgbToHex(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

function desc(ob){
      ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
      try{
      var menuLayout = new android.widget.LinearLayout(ctx);
      var menuScroll = new android.widget.ScrollView(ctx);
      var menuLayout1 = new android.widget.LinearLayout(ctx);
      menuLayout.setOrientation(1);
      menuLayout1.setOrientation(1);
 menuScroll.addView(menuLayout); menuLayout1.addView(menuScroll);
      var textv = new android.widget.TextView(ctx);
    textv.setTextSize(19);
  //  textv.setTypeface(font);
textv.setTextColor(android.graphics.Color.GREEN);
    textv.setText(ob.name); textv.setGravity(android.view.Gravity.CENTER);
    menuLayout.addView(textv);
    
var textv = new android.widget.TextView(ctx);
    textv.setTextSize(15);
    textv.setTypeface(font);
textv.setTextColor(android.graphics.Color.RED);
    textv.setText(ob.desc); textv.setGravity(android.view.Gravity.CENTER);
    menuLayout.addView(textv);

if(ob.hasOwnProperty("getSettings") == true){
menuLayout.addView(ob.getSettings(ob));
}





      //Можно добавить больше кнопок...
      menuD = new android.widget.PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.8, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.5, true);
menuD.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menuD.setFocusable(true);
menuD.getBackground().setAlpha(200);
menuD.setAnimationStyle(android.R.style.Animation_Translucent);
menuD.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
 }catch(err){
 print('An error occured: ' + error);
      }
      }}));
      }

function getNearestEntity(maxrange) {
	var mobs = Entity.getAll();
	var players = Server.getAllPlayers();
	var small = maxrange;
	var ent = null;
	if (mobs != null && players != null) {
		for (var i = 0; i < mobs.length; i++) {
			var x = Entity.getX(mobs[i]) - getPlayerX();
			var y = Entity.getY(mobs[i]) - getPlayerY();
			var z = Entity.getZ(mobs[i]) - getPlayerZ();
			var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
			if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
				small = dist;
				ent = mobs[i];
			}
		}
		for (var i = 0; i < players.length; i++) {
			var x = Entity.getX(players[i]) - getPlayerX();
			var y = Entity.getY(players[i]) - getPlayerY();
			var z = Entity.getZ(players[i]) - getPlayerZ();
			var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
			if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
				small = dist;
				ent = players[i];
			}
		}
		return ent;
	}
}

function crosshairAimAt(ent, pos) {
	if (ent != null) {
		var x = Entity.getX(ent) - Entity.getX(Player.getEntity());
		var y = Entity.getY(ent) - Entity.getY(Player.getEntity());
		var z = Entity.getZ(ent) - Entity.getZ(Player.getEntity());
		if (pos != null && pos instanceof Array) {
			x = Entity.getX(ent) - pos[0];
			y = Entity.getY(ent) - pos[1];
			z = Entity.getZ(ent) - pos[2];
		}
		if (Entity.getEntityTypeId(ent) != 63) y += 0.5;
		var a = 0.5 + Entity.getX(ent);
		var b = Entity.getY(ent);
		var c = 0.5 + Entity.getZ(ent);
		var len = Math.sqrt(x * x + y * y + z * z);
		var y = y / len;
		var pitch = Math.asin(y);
		pitch = pitch * 180.0 / Math.PI;
		pitch = -pitch;
		var yaw = -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + 0.5)) * (180 / Math.PI);
		if (pitch < 89 && pitch > -89) {
			Entity.setRot(Player.getEntity(), yaw, pitch);
		}
	}
}


var Instrumentation = android.app.Instrumentation;
function suka(key) {
let t = new Thread(new Runnable({
				run: function () {
            try {
            	
                let inst = new Instrumentation;
                inst.sendKeyDownUpSync(key);
            } catch (e) {
                print("Exception when sendKeyDownUpSync", e.toString()+"#На строке" +e.lineNumber);
            }
        }
			}));
			t.start();
		}

function entityHurtHook(att, vic, hearts) {
	Noisy.mods.forEach(function (entry, index, array) {
		try {
			entry.onHurt(att, vic, hearts);
		} catch(e) {}

	});
}

function useItem(x, y, z, itemId, blockId, side) {
       Noisy.mods.forEach(function (entry, index, array) {
		try {
			if(entry.hasOwnProperty("onUseItem"))entry.onUseItem(x, y, z, itemId, blockId, side);
		} catch(e) {}

	});
}

function attackHook(a, v) {
Noisy.mods.forEach(function (entry, index, array) {
		try {
			if(entry.hasOwnProperty("onAttack") && (entry.state || entry.isStateMode() == false))entry.onAttack(a, v);
		} catch(e) {}

	});
}

function startDestroyBlock(x, y, z, side){
Noisy.mods.forEach(function (entry, index, array) {
		try {
			if(entry.hasOwnProperty("onStartDestroy") && (entry.state || entry.isStateMode() == false))entry.onStartDestroy(x, y, z, side);
		} catch(e) {}

	});
}
function modTick(){
Noisy.mods.forEach(function (entry, index, array) {
		try {
			if(entry.hasOwnProperty("onModTick") && (entry.state || entry.isStateMode() == false))entry.onModTick();
		} catch(e) {}

	});
}

Noisy.registerModule(esp);
Noisy.registerModule(trac);
Noisy.registerModule(fullbright);

var hitbox = {
	name: "HitBox",
	code: "hitbox.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
var ent = getNearestEntity(7);
	if (ent != getPlayerEnt()) 
    {
	 Entity.setCollisionSize(ent, 15, 5);
    }
    Entity.setCollisionSize(Player.getPointedEntity(), 15, 5);
}
if(this.active == false){
var ent = getNearestEntity(7);
	if (ent != getPlayerEnt()) 
    {
	 Entity.setCollisionSize(ent, 1, 2);
    }
    Entity.setCollisionSize(Player.getPointedEntity(), 1, 2);
}
}
};
Noisy.registerModule(hitbox);

var aimaura = {
	name: "AimAura",
	code: "aimaura.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
var ent = getNearestEntity(7);
	   if (ent != getPlayerEnt()) 
       {
		crosshairAimAt(ent);
		}
}
}
};
Noisy.registerModule(aimaura);

var hitaim = {
	name: "HitAim",
	code: "hitaim.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onAttack: function(){
if(this.active == true){
var ent = getNearestEntity(10);
		if(ent != getPlayerEnt())
       {
		crosshairAimAt(ent);
		}
}
}
};
Noisy.registerModule(hitaim);

var tpaura = {
	name: "TpAura",
	code: "tpaura.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onAttack: function(){
if(this.active == true){
setPosition(getPlayerEnt(), Entity.getX(v), Entity.getY(v) + 2, Entity.getZ(v))
}
}
};
Noisy.registerModule(tpaura);

var criticals = {
	name: "Criticals",
	code: "criticals.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onAttack: function(){
if(this.active == true){
setVelY(getPlayerEnt(), 0.25);
}
}
};
Noisy.registerModule(criticals);

var autosword = {
	name: "AutoSword",
	code: "autosword.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
	if(this.active == true){
var ent = getNearestEntity(6);
       if(ent) {
for(var i = 0;i <= 8;i++) {
if(Player.getInventorySlot(i) == 268) {
Player.setSelectedSlotId(i);
break;
}else

if(Player.getInventorySlot(i) == 272) {
Player.setSelectedSlotId(i);
break;
}else

if(Player.getInventorySlot(i) == 283) {
Player.setSelectedSlotId(i);
break;
}else

if(Player.getInventorySlot(i) == 267) {
Player.setSelectedSlotId(i);
break;
}else

if(Player.getInventorySlot(i) == 276) {
Player.setSelectedSlotId(i);
break;
}
}
}
}
}
};
Noisy.registerModule(autosword);

var hitboost = {
	name: "HitBoost",
	code: "hitboost.code",
	category: "Combat",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onAttack: function(){
	if(this.active == true){
var pitch = ((Entity.getPitch(getPlayerEnt()) + 90) * Math.PI)/180;
var yaw = ((Entity.getYaw(getPlayerEnt()) + 90) * Math.PI)/180;
var X = Math.sin(pitch) * Math.cos(yaw);
var Y = Math.cos(pitch);
var Z = Math.sin(pitch) * Math.sin(yaw);
setVelX(getPlayerEnt(), X * 1.5);
setVelY(getPlayerEnt(), Y * 1.5);
setVelZ(getPlayerEnt(), Z * 1.5);
}
}
};
Noisy.registerModule(hitboost);

var glide = {
	name: "Glide",
	code: "glide.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
setVelY(getPlayerEnt(), -0.01);
}
}
};
Noisy.registerModule(glide);

var jetpack = {
	name: "JetPack",
	code: "jetpack.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.7);
setVelY(Player.getEntity(), y * 0.7);
setVelZ(Player.getEntity(), z * 0.7);
}
}
};
Noisy.registerModule(jetpack);

var spider = {
	name: "Spider",
	code: "spider.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
if(Utils.Player.isCollidedHorizontally()) 
            {
			setVelY(getPlayerEnt(), 0.5);
			}
}
}
};
Noisy.registerModule(spider);

var bhop = {
	name: "BHop",
	code: "bhop.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
if(Utils.Player.onGround()) 
            {
			setVelY(getPlayerEnt(), +0.4);
			}
}
}
};
Noisy.registerModule(bhop);

var speed = {
	name: "Speed",
	code: "speed.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
var curspeed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
if(getTile(getPlayerX(), getPlayerY() - 2, getPlayerZ()) != 0){
if(curspeed > 0.15){
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt())*1.26);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt())*1.26);
  }}
}
}
};
Noisy.registerModule(speed);

var visualroad = {
	name: "VisualRoad",
	code: "visualroad.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
	onModTick: function(){
		if(this.active == true)
		{
			visualroad2();
		}
}
};
Noisy.registerModule(visualroad);

var taptp = {
	name: "TapTP",
	code: "taptp.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
	onUseItem: function(){
		if(this.active == true)
		{
			setPosition(getPlayerEnt(), Player.getPointedBlockX(), Player.getPointedBlockY() + 3.0, Player.getPointedBlockZ())
}
}
};
Noisy.registerModule(taptp);

var tower = {
	name: "Tower",
	code: "tower.code",
	category: "Movement",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
	onUseItem: function(){
		if(this.active == true)
		{
			setVelY(getPlayerEnt(), 0.45);
}
}
};
Noisy.registerModule(tower);

var airjump = {
	name: "AirJump",
	code: "airjump.code",
	category: "Movement",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								airjump.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("AJ");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
							setVelY(getPlayerEnt(), +0.4)
						}
					}));
					layout.addView(Btn);
					airjump.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					airjump.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
airjump.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(airjump);

var elevator = {
	name: "Elevator",
	code: "elevator.code",
	category: "Movement",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								elevator.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("UP");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
							Entity.setPositionRelative(getPlayerEnt(), 0, 2, 0);
						}
					}));
					layout.addView(Btn);
					var Btn1 = new android.widget.Button(ctx);
					Btn1.setTypeface(font);
					Btn1.setText("DOWN");
                    Btn1.setBackground(bg0);
                    Btn1.setTextColor(android.graphics.Color.WHITE);
                    Btn1.setOnTouchListener(touchListen);
					Btn1.setOnLongClickListener(longListen);
					Btn1.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
							Entity.setPositionRelative(getPlayerEnt(), 0, -2, 0);
						}
					}));
					layout.addView(Btn1);
					elevator.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					elevator.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
elevator.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(elevator);

var haste = {
	name: "Haste",
	code: "haste.code",
	category: "Player",
	active: false,
onClicked: function(code){
if(code == this.code){
	this.startY = getPlayerY();
if(this.active == true){
Noisy.toast(this.name, false)
Entity.removeEffect(Player.getEntity (), 3); 
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Entity.addEffect(Player.getEntity (), 3, 5000000, 10, true, false);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(haste);

var fastfall = {
	name: "FastFall",
	code: "fastfall.code",
	category: "Player",
	active: false,
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
if(Entity.getVelY(getPlayerEnt())< -0.04){
	setVelY(getPlayerEnt(), -99);
	}
}
}
};
Noisy.registerModule(fastfall);

var derp = {
	name: "Derp",
	code: "derp.code",
	category: "Player",
	active: false,
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
var ent = getPlayerEnt();
                        var getYaw = Math['floor'](Entity['getYaw'](ent));
                        var getPitch = Math['floor'](Entity['getPitch'](ent));
                        if (getPitch <= 189) {
                            Entity['setRot'](ent, getYaw +180, getPitch)
                        }
}
}
};
Noisy.registerModule(derp);

var jesus = {
	name: "Jesus",
	code: "jesus.code",
	category: "Player",
	active: false,
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	},
onModTick: function(){
if(this.active == true){
	if((getTile(getPlayerX(), getPlayerY() - 0.8, getPlayerZ()) >= 8 && getTile(getPlayerX(), getPlayerY() - 0.8, getPlayerZ()) <= 11)) {
					setVelY(getPlayerEnt(), 0.2);
				} else if((getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ()) >= 8 && getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ()) <= 11)) {
					setVelY(getPlayerEnt(), 0.05);
				} else if((getTile(getPlayerX(), getPlayerY() - 1.68, getPlayerZ()) >= 8 && getTile(getPlayerX(), getPlayerY() - 1.68, getPlayerZ()) <= 11))
					setVelY(getPlayerEnt(), 0.015);
                  if(Utils.Player.IsInWater){
                      setVelY(getPlayerEnt(), 0.015);
                  }
}
}
};
Noisy.registerModule(jesus);

var highjump = {
	name: "HighJump",
	code: "highjump.code",
	category: "Player",
	active: false,
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
Entity.removeEffect(Player.getEntity (), 8);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
Entity.addEffect(Player.getEntity (), 8, 5000000, 4, true, false);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(highjump);

var hitboxbind = {
	name: "HitBox",
	code: "hitboxbind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								hitbox.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("HB");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(hitbox.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
hitbox.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
hitbox.active = true;
}
						}
					}));
					layout.addView(Btn);
					hitbox.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					hitbox.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
hitbox.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(hitboxbind);

var aimaurabind = {
	name: "AimAura",
	code: "aimaurabind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								aimaura.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("AA");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(aimaura.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
aimaura.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
aimaura.active = true;
}
						}
					}));
					layout.addView(Btn);
					aimaura.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					aimaura.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
aimaura.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(aimaurabind);

var tpaurabind = {
	name: "Tpaura",
	code: "tpaurabind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								tpaura.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("TA");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(tpaura.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
tpaura.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
tpaura.active = true;
}
						}
					}));
					layout.addView(Btn);
					tpaura.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					tpaura.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
tpaura.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(tpaurabind);

var glidebind = {
	name: "Glide",
	code: "glidebind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								glide.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("G");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(glide.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
glide.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
glide.active = true;
}
						}
					}));
					layout.addView(Btn);
					glide.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					glide.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
glide.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(glidebind);

var jetpackbind = {
	name: "JetPack",
	code: "jetpackbind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								jetpack.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("J");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(jetpack.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
jetpack.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
jetpack.active = true;
}
						}
					}));
					layout.addView(Btn);
					jetpack.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					jetpack.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
jetpack.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(jetpackbind);

var taptpbind = {
	name: "TapTp",
	code: "taptpbind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								taptp.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("TT");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(taptp.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
taptp.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
taptp.active = true;
}
						}
					}));
					layout.addView(Btn);
					taptp.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					taptp.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
taptp.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(taptpbind);

var towerbind = {
	name: "Tower",
	code: "towerbind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								tower.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("T");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(tower.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
tower.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
tower.active = true;
}
						}
					}));
					layout.addView(Btn);
					tower.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					tower.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
tower.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(towerbind);

var visualroadbind = {
	name: "VisualRoad",
	code: "visualroadbind.code",
	category: "Binds",
	active: false,
showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
                
                var layout = new android.widget.LinearLayout(ctx);
				layout.setOrientation(1);
                
                var moving4 = false;
				var dx4 = 0;
				var dy4 = 0;
				var mPosX4 = 0;
				var mPosY4 = 0;

				var touchListen = new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving4) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx4 = mPosX4 - motionEvent.getRawX();
								dy4 = mPosY4 - motionEvent.getRawY();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX4 = (motionEvent.getRawX() + dx4);
								mPosY4 = (motionEvent.getRawY() + dy4);
								visualroad.gui.update(mPosX4, mPosY4, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving4 = false;
								break;
							}
						} catch(e) {
							simpleToast("Error: " + e);
						}

						return true;
					}
				});
				var longListen = new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving4 = true;
						return true;
					}
				});
				var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            layout.setBackground(bgon2);
					var Btn = new android.widget.Button(ctx);
					Btn.setTypeface(font);
					Btn.setText("VR");
                    Btn.setBackground(bg0);
                    Btn.setTextColor(android.graphics.Color.WHITE);
                    Btn.setOnTouchListener(touchListen);
					Btn.setOnLongClickListener(longListen);
					Btn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
if(visualroad.active == true){
Btn.setBackground(bg0);
Btn.setTextColor(android.graphics.Color.WHITE);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
visualroad.active = false;
}else{
Btn.setBackground(bg);
Btn.setTextColor(android.graphics.Color.BLACK);
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
visualroad.active = true;
}
						}
					}));
					layout.addView(Btn);
					visualroad.gui = new android.widget.PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
					visualroad.gui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 0, ctx.getWindowManager()
					.getDefaultDisplay()
					.getHeight() / 2);
			}
		}));
	},
onClicked: function(code){
if(code == this.code){
if(this.active == true){
Noisy.toast(this.name, false)
visualroad.gui.dismiss();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = false;
}else{
Noisy.toast(this.name, true)
this.showGui();
Level.playSound(getPlayerX(),getPlayerY(),getPlayerZ(),"random.click",50,0);
this.active = true;
}
}
},
isStateMode: function () {
		return false; //Для работы onModTick
	}
};
Noisy.registerModule(visualroadbind);

var RGB = { 
	name: "RGB",
	name2: "RG",
	desc: "Rainbow esp",
	category: "Settings",
	active: true,
	r: 255,
    g: 0,
    b: 0,
    rgbspeed: 0,
    rgbtick: 0,
    onClick: function(btn){
		if(this.active){
this.active = false;
}else{
this.active = true;
}
		},
		isStateMode: function () {
		return false; //Для работы onModTick
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
onModTick: function(){
	//Level.destroyBlock
if(this.active){
if(RGB.rgbtick==0){
if(RGB.r > 0 && RGB.b == 0){
RGB.r=RGB.r-5;
RGB.g=RGB.g+5; 
espRed=RGB.r;
espGreen=RGB.g;
espBlue=RGB.b;
}
if(RGB.g > 0 && RGB.r == 0){
RGB.g=RGB.g-5;
RGB.b=RGB.b+5;
espRed=RGB.r;
espGreen=RGB.g;
espBlue=RGB.b;
}
if(RGB.b > 0 && RGB.g == 0){
RGB.r=RGB.r+5;
RGB.b=RGB.b-5;
espRed=RGB.r;
espGreen=RGB.g;
espBlue=RGB.b;
}
hexc = rgbToHex(espRed,espGreen,espBlue);
RGB.rgbtick=RGB.rgbspeed;
}else{
RGB.rgbtick--;
}
}
}
};
Noisy.registerModule(RGB);
updates();
function updates(){
    ctx.runOnUiThread(new Runnable({ run: function(){
        try {
            var menuScroll = new android.widget.ScrollView(ctx);
            var menuLayout1 = android.widget.LinearLayout(ctx);
            var menuLayout = android.widget.GridLayout(ctx);
            var funLayout = new android.widget.GridLayout(ctx);
            menuLayout.setColumnCount(2);
            funLayout.setColumnCount(1);
            menuLayout1.addView(menuLayout);
            menuScroll.addView(funLayout);
            menuLayout1.addView(menuScroll);
		
		   var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(2), BLUE);
            bgon2.setAlpha(100);
            funLayout.setBackground(bgon2);
            
   var Updates = new android.widget.TextView(ctx);
   Updates.setText("\nUpdates\n\n\nAdded AirJump\n\nAdded Elevator\n\nFixed HitAim\n\nAdded Bind Tower\n\nAdded Bind VisualRoad\n\nFixed Bugs\n");
   Updates.setTextColor(android.graphics.Color.WHITE);
   Updates.setGravity(android.view.Gravity.CENTER);
   Updates.setTextSize(18);
   Updates.setTypeface(font);
   funLayout.addView(Updates);

updategui = new android.widget.PopupWindow(menuLayout1, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, true);
updategui.setAnimationStyle(android.R.style.Animation_Dialog);
updategui.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
updategui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER, 0, 0);
}catch(err){
print('An error occured: ' + err);
} }}));
}

mainMenu();
mainMenu1();
function mainMenu(){
    ctx.runOnUiThread(new Runnable({ run: function(){
        try {
            var menuScroll = new android.widget.ScrollView(ctx);
            var menuLayout1 = android.widget.LinearLayout(ctx);
            var menuLayout = android.widget.GridLayout(ctx);
            var funLayout = new android.widget.GridLayout(ctx);
            menuLayout.setColumnCount(2);
            funLayout.setColumnCount(1);
            menuLayout1.addView(menuLayout);
            menuScroll.addView(funLayout);
            menuLayout1.addView(menuScroll);
		
		   var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(5), Color.BLACK);
            bgon2.setAlpha(200);
            funLayout.setBackground(bgon2);

var Noisy = new android.widget.TextView(ctx);
   Noisy.setText("     Eternity");
   Noisy.setTextColor(android.graphics.Color.WHITE);
   Noisy.setGravity(android.view.Gravity.CENTER);
   Noisy.setTextSize(18);
   Noisy.setTypeface(font);
   menuLayout.addView(Noisy);
   
   var Ver = new android.widget.TextView(ctx);
   Ver.setText("0.2  ");
   Ver.setTextColor(BLUE);
   Ver.setGravity(android.view.Gravity.CENTER);
   Ver.setTextSize(10);
   Ver.setTypeface(font);
   menuLayout.addView(Ver);
				menu = new android.widget.PopupWindow(menuLayout1, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
                menu.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
				menu.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, 0, 0);
			} catch(e) {
				print("Menu Error(" + e.lineNumber + "): " + e);
			}
		}
	}));
}

function mainMenu1(){
    ctx.runOnUiThread(new Runnable({ run: function(){
        try {
            var menuScroll = new android.widget.ScrollView(ctx);
            var menuLayout1 = android.widget.LinearLayout(ctx);
            var menuLayout = android.widget.GridLayout(ctx);
            var funLayout = new android.widget.GridLayout(ctx);
            menuLayout.setColumnCount(2);
            funLayout.setColumnCount(1);
            menuLayout1.addView(menuLayout);
            menuScroll.addView(funLayout);
            menuLayout1.addView(menuScroll);
		
		   var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(1), BLUE);
            bgon2.setAlpha(100);
            funLayout.setBackground(bgon2);

var Combat = new android.widget.TextView(ctx);
      Combat.setText("  Combat >      ");
      Combat.setTextColor(android.graphics.Color.WHITE);
      Combat.setGravity(android.view.Gravity.LEFT);
      Combat.setTextSize(16);
      Combat.setAlpha(100);
      Combat.setBackground(bg0);
            if(combat == 1)
      {
       Combat.setText("  Combat <      ");
       Combat.setBackground(bg);
       Combat.setTextColor(android.graphics.Color.BLACK);
       }
      Combat.getBackground().setAlpha(200);
      Combat.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
   if(movement == 0 && render == 0 && player == 0 && binds == 0){
   if(combat == 1){
    combat = 0;
    Cmenu = false;
    menu2.dismiss();
    Combat.setText("  Combat >      ");
    Combat.setBackground(bg0);
    Combat.setTextColor(android.graphics.Color.WHITE);
   }else{
   combat = 1;
   Cmenu = true;
   mainMenu2();
   Combat.setText("  Combat <      ");
   Combat.setBackground(bg);
   Combat.setTextColor(android.graphics.Color.BLACK);
}
}else{
	menu2.dismiss();
	binds = 0;
	combat = 1;
	movement = 0;
	render = 0;
	player = 0;
	Movement.setTextColor(android.graphics.Color.WHITE);
	Movement.setBackground(bg0);
	Movement.setText("  Movement >");
	    Combat.setText("  Combat <      ");
	     Render.setText("  Render >        ");
	Player.setText("  Player >        ");
   Player.setBackground(bg0);
   Player.setTextColor(android.graphics.Color.WHITE);
   Binds.setText("  Binds >         ");
   Binds.setBackground(bg0);
   Binds.setTextColor(android.graphics.Color.WHITE);
    Render.setBackground(bg0);
    Render.setTextColor(android.graphics.Color.WHITE);
   Combat.setBackground(bg);
   Combat.setTextColor(android.graphics.Color.BLACK);
	Cmenu = true;
	mainMenu2();
    if(combat == 0 && movement == 0 && render == 0 && binds == 0){
    	Combat.setText("  Combat >      ");
    Movement.setText("  Movement >");
    Render.setText("  Render >        ");
    Binds.setText("  Binds >        ");
      menu2.dismiss();
}
}
}
}));
funLayout.addView(Combat);

var Movement = new android.widget.TextView(ctx);
      Movement.setText("  Movement >");
      Movement.setTextColor(android.graphics.Color.WHITE);
      Movement.setGravity(android.view.Gravity.LEFT);
      Movement.setTextSize(16);
      Movement.setAlpha(100);
      Movement.setBackground(bg0);
            if(movement == 1)
      {
       Movement.setText("  Movement <");
       Movement.setBackground(bg);
       Movement.setTextColor(android.graphics.Color.BLACK);
       }
      Movement.getBackground().setAlpha(200);
      Movement.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
	if(combat == 0 && render == 0 && player == 0 && binds == 0){
   if(movement == 1){
    movement = 0;
    Mmenu = false;
    menu2.dismiss();
    Movement.setText("  Movement >");
    Movement.setBackground(bg0);
    Movement.setTextColor(android.graphics.Color.WHITE);
   }else{
   movement = 1;
   Mmenu = true;
   mainMenu2();
   Movement.setText("  Movement <");
   Movement.setBackground(bg);
   Movement.setTextColor(android.graphics.Color.BLACK);
	}
	}else{
	menu2.dismiss();
	binds = 0;
	movement = 1;
	combat = 0;
	player = 0;
	render = 0;
	Combat.setText("  Combat >      ");
	Combat.setTextColor(android.graphics.Color.WHITE);
	Combat.setBackground(bg0);
	Movement.setText("  Movement <");
   Movement.setBackground(bg);
   Movement.setTextColor(android.graphics.Color.BLACK);
   Render.setText("  Render >        ");
    Render.setBackground(bg0);
    Render.setTextColor(android.graphics.Color.WHITE);
    Player.setText("  Player >        ");
   Player.setBackground(bg0);
   Player.setTextColor(android.graphics.Color.WHITE);
   Binds.setText("  Binds >         ");
   Binds.setBackground(bg0);
   Binds.setTextColor(android.graphics.Color.WHITE);
	Mmenu = true;
	mainMenu2();
    if(combat == 0 && movement == 0 && render == 0 && player == 0 && binds == 0){
    	Combat.setText("  Combat >      ");
    Movement.setText("  Movement >");
    Render.setText("  Render >        ");
    Binds.setText("  Binds >        ");
menu2.dismiss();
}
}
}
}));
funLayout.addView(Movement);

var Render = new android.widget.TextView(ctx);
      Render.setText("  Render >        ");
      Render.setTextColor(android.graphics.Color.WHITE);
      Render.setGravity(android.view.Gravity.LEFT);
      Render.setTextSize(16);
      Render.setAlpha(100);
      Render.setBackground(bg0);
            if(render == 1)
      {
       Render.setText("  Render <        ");
       Render.setBackground(bg);
       Render.setTextColor(android.graphics.Color.BLACK);
       }
      Render.getBackground().setAlpha(200);
      Render.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
	if(combat == 0 && movement == 0 && player == 0 && binds == 0){
   if(render == 1){
    render = 0;
    Rmenu = false;
    menu2.dismiss();
    Render.setText("  Render >        ");
    Render.setBackground(bg0);
    Render.setTextColor(android.graphics.Color.WHITE);
   }else{
   render = 1;
   Rmenu = true;
   mainMenu2();
   Render.setText("  Render <        ");
   Render.setBackground(bg);
   Render.setTextColor(android.graphics.Color.BLACK);
	}
	}else{
	menu2.dismiss();
	binds = 0;
	render = 1;
	player = 0;
	movement = 0;
	combat = 0;
	Combat.setText("  Combat >      ");
	Combat.setTextColor(android.graphics.Color.WHITE);
	Combat.setBackground(bg0);
	Movement.setText("  Movement >");
   Movement.setBackground(bg0);
   Movement.setTextColor(android.graphics.Color.WHITE);
   Render.setText("  Render <        ");
   Render.setBackground(bg);
   Render.setTextColor(android.graphics.Color.BLACK);
   Player.setText("  Player >        ");
   Player.setBackground(bg0);
   Player.setTextColor(android.graphics.Color.WHITE);
   Binds.setText("  Binds >         ");
   Binds.setBackground(bg0);
   Binds.setTextColor(android.graphics.Color.WHITE);
	Rmenu = true;
	mainMenu2();
    if(combat == 0 && movement == 0 && render == 0 && player == 0 && binds == 0){
    Combat.setText("  Combat >      ");
    Movement.setText("  Movement >");
    Render.setText("  Render >        ");
    Player.setText("  Player >        ");
    Binds.setText("  Binds >        ");
menu2.dismiss();
}
}
}
}));
funLayout.addView(Render);

var Player = new android.widget.TextView(ctx);
      Player.setText("  Player >       ");
      Player.setTextColor(android.graphics.Color.WHITE);
      Player.setGravity(android.view.Gravity.LEFT);
      Player.setTextSize(16);
      Player.setAlpha(100);
      Player.setBackground(bg0);
            if(player == 1)
      {
       Player.setText("  Player <        ");
       Player.setBackground(bg);
       Player.setTextColor(android.graphics.Color.BLACK);
       }
      Player.getBackground().setAlpha(200);
      Player.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
	if(combat == 0 && movement == 0 && render == 0 && binds == 0){
   if(player == 1){
    player = 0;
    Pmenu = false;
    menu2.dismiss();
    Player.setText("  Player >        ");
    Player.setBackground(bg0);
    Player.setTextColor(android.graphics.Color.WHITE);
   }else{
   player = 1;
   Pmenu = true;
   mainMenu2();
   Player.setText("  Player <        ");
   Player.setBackground(bg);
   Player.setTextColor(android.graphics.Color.BLACK);
	}
	}else{
	menu2.dismiss();
	binds = 0;
	player = 1;
	render = 0;
	movement = 0;
	combat = 0;
	Combat.setText("  Combat >      ");
	Combat.setTextColor(android.graphics.Color.WHITE);
	Combat.setBackground(bg0);
	Movement.setText("  Movement >");
   Movement.setBackground(bg0);
   Movement.setTextColor(android.graphics.Color.WHITE);
   Render.setText("  Render >        ");
   Render.setBackground(bg0);
   Render.setTextColor(android.graphics.Color.WHITE);
   Player.setText("  Player <        ");
   Player.setBackground(bg);
   Player.setTextColor(android.graphics.Color.BLACK);
   Binds.setText("  Binds >         ");
   Binds.setBackground(bg0);
   Binds.setTextColor(android.graphics.Color.WHITE);
	Pmenu = true;
	mainMenu2();
    if(combat == 0 && movement == 0 && render == 0 && player == 0 && binds == 0){
    Combat.setText("  Combat >      ");
    Movement.setText("  Movement >");
    Render.setText("  Render >        ");
    Player.setText("  Player >        ");
    Binds.setText("  Binds >        ");
menu2.dismiss();
}
}
}
}));
funLayout.addView(Player);

var Binds = new android.widget.TextView(ctx);
      Binds.setText("  Binds >        ");
      Binds.setTextColor(android.graphics.Color.WHITE);
      Binds.setGravity(android.view.Gravity.LEFT);
      Binds.setTextSize(16);
      Binds.setAlpha(100);
      Binds.setBackground(bg0);
            if(binds == 1)
      {
       Binds.setText("  Binds <         ");
       Binds.setBackground(bg);
       Binds.setTextColor(android.graphics.Color.BLACK);
       }
      Binds.getBackground().setAlpha(200);
      Binds.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
	if(combat == 0 && movement == 0 && render == 0 && player == 0){
   if(binds == 1){
    binds = 0;
    Bmenu = false;
    menu2.dismiss();
    Binds.setText("  Binds >         ");
    Binds.setBackground(bg0);
    Binds.setTextColor(android.graphics.Color.WHITE);
   }else{
   binds = 1;
   Bmenu = true;
   mainMenu2();
   Binds.setText("  Binds <         ");
   Binds.setBackground(bg);
   Binds.setTextColor(android.graphics.Color.BLACK);
	}
	}else{
	menu2.dismiss();
	binds = 1;
	player = 0;
	render = 0;
	movement = 0;
	combat = 0;
	Combat.setText("  Combat >      ");
	Combat.setTextColor(android.graphics.Color.WHITE);
	Combat.setBackground(bg0);
	Movement.setText("  Movement >");
   Movement.setBackground(bg0);
   Movement.setTextColor(android.graphics.Color.WHITE);
   Render.setText("  Render >        ");
   Render.setBackground(bg0);
   Render.setTextColor(android.graphics.Color.WHITE);
   Player.setText("  Player >        ");
   Player.setBackground(bg0);
   Player.setTextColor(android.graphics.Color.WHITE);
   Binds.setText("  Binds <         ");
   Binds.setBackground(bg);
   Binds.setTextColor(android.graphics.Color.BLACK);
	Bmenu = true;
	mainMenu2();
    if(combat == 0 && movement == 0 && render == 0 && player == 0 && binds == 0){
    Combat.setText("  Combat >      ");
    Movement.setText("  Movement >");
    Render.setText("  Render >        ");
    Player.setText("  Player >        ");
    Binds.setText("  Binds >        ");
menu2.dismiss();
}
}
}
}));
funLayout.addView(Binds);

				menu1 = new android.widget.PopupWindow(menuLayout1, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
                menu1.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
				menu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, 50, 50);
			} catch(e) {
				print("Menu Error(" + e.lineNumber + "): " + e);
			}
		}
	}));
}

function mainMenu2(){
    ctx.runOnUiThread(new Runnable({ run: function(){
        try {
            var menuScroll = new android.widget.ScrollView(ctx);
            var menuLayout1 = android.widget.LinearLayout(ctx);
            var funLayout = new android.widget.GridLayout(ctx);
            funLayout.setColumnCount(1);
            menuScroll.addView(funLayout);
            menuLayout1.addView(menuScroll);
		
		   var bgon2 = new GradientDrawable();
            bgon2.setColor(Color.BLACK);
            bgon2.setStroke(dip2px(1), BLUE);
            bgon2.setAlpha(100);
            funLayout.setBackground(bgon2);

function generateButton(s){
var razz;
for(var tee=Noisy.getPage(curpage); tee<Utils.modsCount; tee++){
	if(Noisy.mods[tee].category == "Combat" && Cmenu == true){
var colortext1 = new android.widget.TextView(ctx);
colortext1.setText(Noisy.mods[tee].name); 
    colortext1.setId(tee);
    colortext1.setBackground(bg0);
    colortext1.setTextColor(android.graphics.Color.WHITE);
    colortext1.setGravity(android.view.Gravity.CENTER);
   colortext1.setTextSize(16);
   if(Noisy.mods[tee].active == true){
   colortext1.setTextColor(android.graphics.Color.BLACK);
   colortext1.setBackground(bg);
   }else{
   colortext1.setTextColor(android.graphics.Color.WHITE);
   colortext1.setBackground(bg0);
   }
colortext1.getBackground().setAlpha(200);
colortext1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
var id = viewarg.getId();
Clicked(Noisy.mods[id].code);
if(Noisy.mods[id].active == true){
	viewarg.setBackground(bg);
   	viewarg.setTextColor(android.graphics.Color.BLACK);
   }else{
   	viewarg.setTextColor(android.graphics.Color.WHITE);
   viewarg.setBackground(bg0);
   }
}
}));
funLayout.addView(colortext1);
}
if(Noisy.mods[tee].category == "Movement" && Mmenu == true){
var colortext1 = new android.widget.TextView(ctx);
colortext1.setText(Noisy.mods[tee].name); 
    colortext1.setId(tee);
    colortext1.setBackground(bg0);
    colortext1.setTextColor(android.graphics.Color.WHITE);
    colortext1.setGravity(android.view.Gravity.CENTER);
   colortext1.setTextSize(16);
   if(Noisy.mods[tee].active == true){
   colortext1.setTextColor(android.graphics.Color.BLACK);
   colortext1.setBackground(bg);
   }else{
   colortext1.setTextColor(android.graphics.Color.WHITE);
   colortext1.setBackground(bg0);
   }
colortext1.getBackground().setAlpha(200);
colortext1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
var id = viewarg.getId();
Clicked(Noisy.mods[id].code);
if(Noisy.mods[id].active == true){
	viewarg.setBackground(bg);
   	viewarg.setTextColor(android.graphics.Color.BLACK);
   }else{
   	viewarg.setTextColor(android.graphics.Color.WHITE);
   viewarg.setBackground(bg0);
   }
}
}));
funLayout.addView(colortext1);
}
if(Noisy.mods[tee].category == "Render" && Rmenu == true){
var colortext1 = new android.widget.TextView(ctx);
colortext1.setText(Noisy.mods[tee].name); 
    colortext1.setId(tee);
    colortext1.setBackground(bg0);
    colortext1.setTextColor(android.graphics.Color.WHITE);
    colortext1.setGravity(android.view.Gravity.CENTER);
   colortext1.setTextSize(16);
   if(Noisy.mods[tee].active == true){
   colortext1.setTextColor(android.graphics.Color.BLACK);
   colortext1.setBackground(bg);
   }else{
   colortext1.setTextColor(android.graphics.Color.WHITE);
   colortext1.setBackground(bg0);
   }
colortext1.getBackground().setAlpha(200);
colortext1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
var id = viewarg.getId();
Clicked(Noisy.mods[id].code);
if(Noisy.mods[id].active == true){
	viewarg.setBackground(bg);
   	viewarg.setTextColor(android.graphics.Color.BLACK);
   }else{
   	viewarg.setTextColor(android.graphics.Color.WHITE);
   viewarg.setBackground(bg0);
   }
}
}));
funLayout.addView(colortext1);
}
if(Noisy.mods[tee].category == "Player" && Pmenu == true){
var colortext1 = new android.widget.TextView(ctx);
colortext1.setText(Noisy.mods[tee].name); 
    colortext1.setId(tee);
    colortext1.setBackground(bg0);
    colortext1.setTextColor(android.graphics.Color.WHITE);
    colortext1.setGravity(android.view.Gravity.CENTER);
   colortext1.setTextSize(16);
   if(Noisy.mods[tee].active == true){
   colortext1.setTextColor(android.graphics.Color.BLACK);
   colortext1.setBackground(bg);
   }else{
   colortext1.setTextColor(android.graphics.Color.WHITE);
   colortext1.setBackground(bg0);
   }
colortext1.getBackground().setAlpha(200);
colortext1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
var id = viewarg.getId();
Clicked(Noisy.mods[id].code);
if(Noisy.mods[id].active == true){
	viewarg.setBackground(bg);
   	viewarg.setTextColor(android.graphics.Color.BLACK);
   }else{
   	viewarg.setTextColor(android.graphics.Color.WHITE);
   viewarg.setBackground(bg0);
   }
}
}));
funLayout.addView(colortext1);
}
if(Noisy.mods[tee].category == "Binds" && Bmenu == true){
var colortext1 = new android.widget.TextView(ctx);
colortext1.setText(Noisy.mods[tee].name); 
    colortext1.setId(tee);
    colortext1.setBackground(bg0);
    colortext1.setTextColor(android.graphics.Color.WHITE);
    colortext1.setGravity(android.view.Gravity.CENTER);
   colortext1.setTextSize(16);
   if(Noisy.mods[tee].active == true){
   colortext1.setTextColor(android.graphics.Color.BLACK);
   colortext1.setBackground(bg);
   }else{
   colortext1.setTextColor(android.graphics.Color.WHITE);
   colortext1.setBackground(bg0);
   }
colortext1.getBackground().setAlpha(200);
colortext1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
var id = viewarg.getId();
Clicked(Noisy.mods[id].code);
if(Noisy.mods[id].active == true){
	viewarg.setBackground(bg);
   	viewarg.setTextColor(android.graphics.Color.BLACK);
   }else{
   	viewarg.setTextColor(android.graphics.Color.WHITE);
   viewarg.setBackground(bg0);
   }
}
}));
funLayout.addView(colortext1);
}
}
}
generateButton();
Cmenu = false;
Mmenu = false;
Rmenu = false;
Pmenu = false;
Bmenu = false;
				menu2 = new android.widget.PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.1, ctx.getWindowManager().getDefaultDisplay().getHeight()/2.8);
				menu2.setAnimationStyle(android.R.style.Animation_Dialog);
                menu2.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
				menu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, 330, 40);
			} catch(e) {
				print("Menu Error(" + e.lineNumber + "): " + e);
			}
		}
	}));
}